{"name":"Simpletypes","tagline":"The universal PHP library to convert any values and measures (money, weight, currency, length e.t.c)","body":"# SimpleTypes\r\n\r\n### The universal PHP library to convert any values and measures\r\n\r\n[![License](https://poser.pugx.org/smetdenis/simpletypes/license)](https://packagist.org/packages/smetdenis/simpletypes)  [![Latest Stable Version](https://poser.pugx.org/smetdenis/simpletypes/v/stable)](https://packagist.org/packages/smetdenis/simpletypes)  [![Build Status](https://travis-ci.org/smetdenis/SimpleTypes.svg?branch=master)](https://travis-ci.org/smetdenis/SimpleTypes)  [![Coverage Status](https://coveralls.io/repos/smetdenis/SimpleTypes/badge.svg)](https://coveralls.io/r/smetdenis/SimpleTypes)  [![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/smetdenis/SimpleTypes/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/smetdenis/SimpleTypes/?branch=master)  [![Code Climate](https://codeclimate.com/github/smetdenis/SimpleTypes/badges/gpa.svg)](https://codeclimate.com/github/smetdenis/SimpleTypes)  \r\n[![Dependency Status](https://www.versioneye.com/user/projects/5596cc726166340021000010/badge.svg?style=flat)](https://www.versioneye.com/user/projects/5596cc726166340021000010) \r\n[![HHVM Status](http://hhvm.h4cc.de/badge/smetdenis/simpletypes.svg)](http://hhvm.h4cc.de/package/smetdenis/simpletypes)  [![SensioLabsInsight](https://insight.sensiolabs.com/projects/03303b96-02dc-4e6e-b1ca-ac87e5f4ca9a/mini.png)](https://insight.sensiolabs.com/projects/03303b96-02dc-4e6e-b1ca-ac87e5f4ca9a)\r\n\r\n## Installation\r\nSimply add a dependency on `smetdenis/simpletypes` to your project's `composer.json` file if you use [Composer](http://getcomposer.org/) to manage the dependencies of your project.\r\nHere is a minimal example of a `composer.json` file that just defines a dependency on Money:\r\n```javascript\r\n{\r\n    \"require\": {\r\n        \"smetdenis/simpletypes\": \"1.*\"\r\n    }\r\n}\r\n```\r\n\r\n... or in a command line `composer require smetdenis/simpletypes`\r\n\r\n## Examples\r\n\r\n```php\r\nrequire_once './src/autoload.php'; // or with composer autoload.php\r\n\r\nuse SmetDenis\\SimpleTypes\\Config;\r\nuse SmetDenis\\SimpleTypes\\Money;\r\nuse SmetDenis\\SimpleTypes\\ConfigMoney;\r\n\r\n// Set config object for all Money objects as default\r\nConfig::registerDefault('money', new ConfigMoney());\r\n\r\n// Create any object, some different ways\r\n$money = new Money('10 eur');\r\n$money = new Weight('1000'); // Gram is default in the ConfigWeight class\r\n$money = new Length('500 km');\r\n$money = new Money('100500 usd', new ConfigMoney()); // my custom params only for that object\r\n```\r\n\r\n## A lot of types is ready for use\r\nSimpleTypes has such ready configurations like\r\n  * Area\r\n  * Degree (geometry)\r\n  * Info (bytes, bits...)\r\n  * Length\r\n  * Money (Currency converter)\r\n  * Temperature (Kelvin, Fahrenheit, Celsius and etc)\r\n  * Volume\r\n  * Weight\r\n\r\nYou can add your own type. It's really easy. See this page below.\r\n\r\n### Smart and useful parser\r\nSimpleTypes has really smart parser for all input values.\r\nIt can find number, understand any decimal symbols, trim, letter cases, e.t.c...\r\n\r\n```php\r\n$money = new Money(' - 1 2 3 , 4 5 6 rub '); // Equals -123.456 rubles\r\n$money = new Money('1.0e+18 EUR '); // Really huge number. I'm rich! =)\r\n$money = new Money('  EuR 3,50   ');\r\n$money = new Money('usd'); // Just object with usd rule\r\n```\r\n\r\n### Basic arithmetic\r\nDifferent ways to use basic arithmetic\r\n```php\r\n// example #1\r\n$usd = new Money('10 usd');\r\n$usd->add(new Money('10 eur'));\r\n\r\n// example #2\r\n$usd = (new Money('10 usd'))->add(new Money('10 eur'));\r\n\r\n// example #3\r\n$usd->add('10 eur');\r\n\r\n// example #4\r\n$usd->add('10'); // eur is default in the ConfigMoney\r\n\r\n// example #5\r\n$usd->add(['10', 'eur']);\r\n```\r\n\r\n### Chaining method calls\r\n```php\r\n$value = (new Money('4.95 usd'))\r\n    ->add('10 usd')// $14.95\r\n    ->subtract('2 eur')// $10.95\r\n    ->negative()// -$10.95\r\n    ->getClone()// copy of object is created\r\n    ->division(5)// -$2.19\r\n    ->multiply(10)// -$21.90\r\n    ->convert('eur')// -10.95€ (For easy understanding we use 1 EUR = 2 USD)\r\n    ->customFunc(function (Money $value) { // sometimes we would like something more than plus/minus ;)\r\n        $value\r\n            ->add(new Money('600 rub'))// 1.05€ (1 EUR = 50 RUB)\r\n            ->add('-500%');// -4.2€\r\n    })\r\n    ->abs() // 4.2€\r\n```\r\n\r\n## Different ways for output and rendering\r\n### Only text\r\n\r\n```php\r\n$value = new Money('-50.666666 usd');\r\necho $value->text(); // \"-$50.67\"\r\necho $value->text('rub'); // \"-1 266,67 руб.\" (output without changing inner state)\r\necho $value->noStyle('rub');// \"-1 266,67\" (without symbol)\r\n```\r\n\r\n### Simple HTML rendering\r\n```php\r\necho (new Money('-50.666666 usd'))->html('rub'); // render HTML, useful for JavaScript\r\n```\r\nOutput (warping added just for clarity)\r\n```php\r\n<span\r\n    class=\"simpleType simpleType-block simpleType-money\"\r\n    data-simpleType-id=\"1\"\r\n    data-simpleType-value=\"-1266.66665\"\r\n    data-simpleType-rule=\"rub\"\r\n    data-simpleType-orig-value=\"-50.666666\"\r\n    data-simpleType-orig-rule=\"usd\">\r\n        -<span class=\"simpleType-value\">1 266,67</span>\r\n        <span class=\"simpleType-symbol\">руб.</span>\r\n</span>\r\n```\r\n\r\n### HTML Input type[text]\r\n```php\r\necho $value->htmlInput('rub', 'input-name-attr');\r\n```\r\nOutput (warping added just for clarity)\r\n```html\r\n<input\r\n    value=\"-1 266,67\"\r\n    name=\"input-name-attr\"\r\n    type=\"text\"\r\n    class=\"simpleType simpleType-money simpleType-input\"\r\n    data-simpleType-id=\"1\"\r\n    data-simpleType-value=\"-1266.66665\"\r\n    data-simpleType-rule=\"rub\"\r\n    data-simpleType-orig-value=\"-50.666666\"\r\n    data-simpleType-orig-rule=\"usd\"\r\n/>\r\n```\r\n\r\n**Notice:** Yes, we added a lot of data-attributes in the HTML code. It will be useful for JavaScript and converting without reload a page.\r\n\r\n\r\n## Configuration of type\r\n\r\nAll configuration classes should be extended from Config class\r\nFor example, config for information\r\n```php\r\n/**\r\n * Class ConfigInfo\r\n * @package SmetDenis\\SimpleTypes\r\n */\r\nclass ConfigInfo extends Config\r\n{\r\n    /**\r\n     * SimpleTypes uses it for converting and while parsing undefined values\r\n     * @var string\r\n     */\r\n    public $default = 'byte';\r\n    \r\n    /**\r\n     * To collect or not to collect logs for each object (need additional memory a little bit)\r\n     * @var bool\r\n     */\r\n    public $isDebug = true;\r\n    \r\n    /**\r\n     * Array of converting rules and output format\r\n     * return array\r\n     */\r\n    public function getRules()\r\n    {\r\n        // key of array is alias for parser\r\n        return array(\r\n            'byte' => array(\r\n                'rate' => 1 // 1 byte = 1 byte =)))\r\n            ),\r\n\r\n            'kb'   => array(\r\n                'symbol'          => 'KB',                     // symbol for output (->text(), ->html(), ...)\r\n                'round_type'      => Formatter::ROUND_CLASSIC, // classic, float, ceil, none\r\n                'round_value'     => Formatter::ROUND_DEFAULT, // Count of valuable number after decimal point for any arithmetic actions\r\n                'num_decimals'    => '2',       // Sets the number of decimal points\r\n                'decimal_sep'     => '.',       // Sets the separator for the decimal point.\r\n                'thousands_sep'   => ' ',       // Sets the thousands separator.\r\n                'format_positive' => '%v %s',   // %v - replace to rounded and formated (number_format()) value\r\n                'format_negative' => '-%v %s',  // %s - replace to symbol\r\n                'rate'            => 1024,      // How many bytes (default measure) in the 1 KB ?\r\n            ),\r\n\r\n            'mb'   => array( // Other params gets from $this->defaultParams variable\r\n                'symbol' => 'GB',\r\n                'rate'   => 1024 * 1024,\r\n            ),\r\n\r\n            'gb'   => array( // Other params gets from $this->defaultParams variable\r\n                'symbol' => 'GB',\r\n                'rate'   => 1024 * 1024 * 1024,\r\n            ),\r\n\r\n            'bit'  => array(\r\n                'symbol' => 'Bit',\r\n                'rate'   => function ($value, $to) { // Custom callback function for difficult conversion\r\n                    if ($to == 'bit') {\r\n                         return $value * 8;\r\n                    }\r\n                    return $value / 8;\r\n                },\r\n            ),\r\n        );\r\n    }\r\n}\r\n```\r\n\r\nUsage example for our information type\r\n```php\r\n// create config object\r\n$config = new ConfigInfo();\r\n\r\n// you can register default config for all info-objects,\r\nConfig::registerDefault('info', $config);\r\n$info1 = new Info('700 MB');\r\n$info2 = new Info('1.4 GB');\r\n\r\n// or add config object manually\r\n$info1 = new Info('700 MB', $config);\r\n$info2 = new Info('1.4 GB', $config);\r\n\r\n// Well... some calculations\r\necho $info2->subtract($info1)->dump() . PHP_EOL;\r\necho $info2->convert('mb')->dump() . PHP_EOL;\r\nprint_r($info2->logs());\r\n```\r\n\r\nOutput\r\n```\r\n0.71640625 gb; id=4\r\n733.6 mb; id=4\r\nArray\r\n(\r\n    [0] => Id=4 has just created; dump=\"1.4 gb\"\r\n    [1] => Subtract \"700 mb\"; New value = \"0.71640625 gb\"\r\n    [2] => Converted \"gb\"=>\"mb\"; New value = \"733.6 mb\"; 1 gb = 1024 mb\r\n)\r\n```\r\n\r\n### Debug information\r\nShow list of all actions with object. For example, this is history for chaining code\r\n```php\r\nprint_r($value->logs());\r\n\r\n/**\r\n * Array\r\n * (\r\n *     [0]  => Id=16 has just created; dump=\"4.95 usd\"\r\n *     [1]  => Add \"10 usd\"; New value = \"14.95 usd\"\r\n *     [2]  => Subtract \"2 eur\"; New value = \"10.95 usd\"\r\n *     [3]  => Set negative; New value = \"-10.95 usd\"\r\n *     [4]  => Cloned from id=16 and created new with id=19; dump=-10.95 usd\r\n *     [5]  => Division with \"5\"; New value = \"-2.19 usd\"\r\n *     [6]  => Multiply with \"10\"; New value = \"-21.9 usd\"\r\n *     [7]  => Converted \"usd\"=>\"eur\"; New value = \"-10.95 eur\"; 1 usd = 0.5 eur\r\n *     [8]  => --> Function start\r\n *     [9]  => Add \"600 rub\"; New value = \"1.05 eur\"\r\n *     [10] => Add \"-500 %\"; New value = \"-4.2 eur\"\r\n *     [11] => <-- Function finished; New value = \"-4.2 eur\"\r\n *     [12] => Set positive/abs; New value = \"4.2 eur\"\r\n * )\r\n */\r\n```\r\n\r\nShow real inner data without any formating and rounding. ID is unique number for SimpleType objects.\r\n```php\r\necho $value->dump(); // \"4.2 eur; id=19\"\r\n```\r\n\r\nGet object id\r\n```php\r\necho $value->getId(); // \"19\"\r\n```\r\nShow current value\r\n```php\r\necho $value->val(); // \"4.2\"\r\n```\r\n\r\nShow current rule\r\n```php\r\necho $value->val(); // \"eur\"\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}